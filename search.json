[{"path":"https://sfcheung.github.io/semlrtp/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://sfcheung.github.io/semlrtp/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/semlrtp/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://sfcheung.github.io/semlrtp/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://sfcheung.github.io/semlrtp/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://sfcheung.github.io/semlrtp/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://sfcheung.github.io/semlrtp/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://sfcheung.github.io/semlrtp/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://sfcheung.github.io/semlrtp/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://sfcheung.github.io/semlrtp/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://sfcheung.github.io/semlrtp/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://sfcheung.github.io/semlrtp/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://sfcheung.github.io/semlrtp/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://sfcheung.github.io/semlrtp/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://sfcheung.github.io/semlrtp/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://sfcheung.github.io/semlrtp/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://sfcheung.github.io/semlrtp/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://sfcheung.github.io/semlrtp/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://sfcheung.github.io/semlrtp/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://sfcheung.github.io/semlrtp/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://sfcheung.github.io/semlrtp/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://sfcheung.github.io/semlrtp/articles/internal_workflow.html","id":"the-workflow-of-lrtp","dir":"Articles","previous_headings":"","what":"The Workflow of lrtp()","title":"Technical Appendix: The Internal Workflow of Main Functions","text":"Workflow semlrtp::lrtp()","code":""},{"path":"https://sfcheung.github.io/semlrtp/articles/internal_workflow.html","id":"the-workflow-of-free_pars","dir":"Articles","previous_headings":"","what":"The Workflow of free_pars()","title":"Technical Appendix: The Internal Workflow of Main Functions","text":"Workflow semlrtp:::free_pars()","code":""},{"path":"https://sfcheung.github.io/semlrtp/articles/internal_workflow.html","id":"the-workflow-of-lrt","dir":"Articles","previous_headings":"","what":"The Workflow of lrt()","title":"Technical Appendix: The Internal Workflow of Main Functions","text":"Workflow semlrtp:::lrt()","code":""},{"path":"https://sfcheung.github.io/semlrtp/articles/internal_workflow.html","id":"the-workflow-of-fix_to_zero","dir":"Articles","previous_headings":"","what":"The Workflow of fix_to_zero()","title":"Technical Appendix: The Internal Workflow of Main Functions","text":"Workflow semlrtp:::fix_to_zero()","code":""},{"path":"https://sfcheung.github.io/semlrtp/articles/semlrtp.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Get Started","text":"article illustrates use semlrtp compute LRT p-values selected free parameters model fitted lavaan. packages needed illustration:","code":"library(lavaan) #> This is lavaan 0.6-19 #> lavaan is FREE software! Please report any bugs. library(semlrtp)"},{"path":"https://sfcheung.github.io/semlrtp/articles/semlrtp.html","id":"lrt-p-values","dir":"Articles","previous_headings":"","what":"LRT p-Values","title":"Get Started","text":"called LRT p-value parameter simply p-value likelihood ratio test (LRT, .k.. χ2\\chi^2 difference test) comparing fitted model model parameter fixed zero. new aware packages using default p-value testing model parameters. package semlrtp developed facilitate use p-value.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/semlrtp/articles/semlrtp.html","id":"data","dir":"Articles","previous_headings":"Basic Workflow","what":"Data","title":"Get Started","text":"sample dataset package, 16 variables group variable:","code":"data(data_sem16) print(head(data_sem16), digits = 2) #>      x1    x2    x3    x4     x5     x6    x7    x8    x9   x10   x11    x12 #> 1  1.00 -1.43  0.45 -0.67 -0.044 -1.316 -0.52 -0.35 -1.01  1.40 -0.22 -1.879 #> 2  0.07 -0.45  1.85 -0.68  0.524 -0.172  0.52 -2.46 -0.34 -0.20 -0.55 -0.948 #> 3  0.95  0.24  0.07  0.69 -0.726  0.164 -0.55 -0.69 -1.36  0.36  0.16  0.758 #> 4  0.28  0.92  0.29 -0.93 -1.516 -0.047 -0.37  0.69  0.38  0.19  0.21  1.089 #> 5 -2.10 -0.55 -1.22 -1.57 -0.886  1.405  1.28  1.00 -1.74 -0.96 -1.51 -0.062 #> 6  1.01  1.05  0.93  0.70 -0.380  1.513 -1.97  1.44  2.42  1.45  0.60  0.521 #>      x13   x14    x15    x16 group #> 1 -0.110 -0.89  0.572  0.093 gamma #> 2 -0.036 -1.65  0.142 -0.506 gamma #> 3 -0.562 -0.53  0.508  1.549 gamma #> 4 -0.885  0.93 -0.824  2.374 gamma #> 5  0.076  1.16 -0.011  0.491 gamma #> 6  0.830  0.45  1.886  1.489 gamma"},{"path":"https://sfcheung.github.io/semlrtp/articles/semlrtp.html","id":"model","dir":"Articles","previous_headings":"Basic Workflow","what":"Model","title":"Get Started","text":"model fitted, four latent factors, structural model factors: first fit model whole sample:","code":"mod <- \" f1 =~ x1 + x2 + x3 f2 =~ x5 + x6 + x7 f3 =~ x9 + x10 + x11 f4 =~ x13 + x14 + x15 f3 ~ f1 + f2 f4 ~ f3 \" fit <- sem(mod,            data_sem16)"},{"path":"https://sfcheung.github.io/semlrtp/articles/semlrtp.html","id":"lrt-p-values-for-selected-parameters","dir":"Articles","previous_headings":"Basic Workflow","what":"LRT p-Values For Selected Parameters","title":"Get Started","text":"use default settings, can compute LRT p-values just calling lrtp() lavann output. default, LRT p-values computed regression paths (\"~\") covariances (\"~~\"), excluding variances error covariances. default, output printed lavaan style, parameters LRT p-values printed: column Chisq shows χ2\\chi^2 difference likelihood ratio test parameter fixed zero. column LRTp shows LRT p-value.","code":"fit_lrtp <- lrtp(fit) fit_lrtp #>  #> Parameter Estimates: #>  #>   Standard errors                             Standard #>   Information                                 Expected #>   Information saturated (h1) model          Structured #>  #> Regressions: #>                    Estimate  Std.Err    Chisq     LRTp #>   f3 ~                                                 #>     f1                0.656    0.191   13.381    0.000 #>     f2                0.347    0.179    4.016    0.045 #>   f4 ~                                                 #>     f3                0.602    0.131   44.155    0.000 #>  #> Covariances: #>                    Estimate  Std.Err    Chisq     LRTp #>   f1 ~~                                                #>     f2                0.099    0.039    9.729    0.002"},{"path":"https://sfcheung.github.io/semlrtp/articles/semlrtp.html","id":"how-lrt-p-values-are-computed","dir":"Articles","previous_headings":"Basic Workflow","what":"How LRT p-Values Are Computed","title":"Get Started","text":"can verified LRT p-value parameter likelihood ratio test (LRT) p-value (.k.. χ2\\chi^2 difference test) parameter fitted zero. example, fix path f2 f3 zero LR test: Unlike original p-value path, 0.052, LRT p-value 0.045, suggesting path f2 f2 significant.","code":"mod_f3_f2 <- \" f1 =~ x1 + x2 + x3 f2 =~ x5 + x6 + x7 f3 =~ x9 + x10 + x11 f4 =~ x13 + x14 + x15 f3 ~ f1 + 0*f2 f4 ~ f3 \" fit_f3_f2 <- sem(mod_f3_f2,                  data_sem16) lavTestLRT(fit_f3_f2,            fit) #>  #> Chi-Squared Difference Test #>  #>           Df   AIC   BIC  Chisq Chisq diff    RMSEA Df diff Pr(>Chisq)   #> fit       50 12206 12313 41.183                                          #> fit_f3_f2 51 12208 12311 45.199      4.016 0.094743       1    0.04507 * #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":"https://sfcheung.github.io/semlrtp/articles/semlrtp.html","id":"why-lrt-p-value","dir":"Articles","previous_headings":"","what":"Why LRT p-Value","title":"Get Started","text":"example illustrates importance LRT p-value. usual p-values lavaan (many SEM programs) Wald-based p-values. Wald-based p-value approximation LRT p-value parameter fixed zero. approximation can different LRT p-value. Moreover, may also depend parameterization (Gonzalez & Griffin, 2001). example, can fit model changing indicators fixed 1. model previous one exactly identical model fit, expected: parameter estimates Wald p-values (regression paths displayed) Wald p-value 0.067, even larger 0.052 original model. However, LRT p-values : LRT p-value invariant parameterization.","code":"mod2 <- \" f1 =~ x2 + x1 + x3 f2 =~ x7 + x5 + x6 f3 =~ x11 + x9 + x10 f4 =~ x14 + x13 + x15 f3 ~ f1 + f2 f4 ~ f3 \" fit2 <- sem(mod2,             data_sem16) fitMeasures(fit, c(\"chisq\", \"df\")) #>  chisq     df  #> 41.183 50.000 fitMeasures(fit2, c(\"chisq\", \"df\")) #>  chisq     df  #> 41.183 50.000 parameterEstimates(fit2,                    output = \"text\") #> Regressions: #>                    Estimate  Std.Err  z-value  P(>|z|) ci.lower ci.upper #>   f3 ~                                                                   #>     f1                0.714    0.220    3.239    0.001    0.282    1.146 #>     f2                0.505    0.276    1.828    0.067   -0.036    1.047 #>   f4 ~                                                                   #>     f3                0.683    0.148    4.599    0.000    0.392    0.974 fit2_lrtp <- lrtp(fit2) fit2_lrtp #>  #> Parameter Estimates: #>  #>   Standard errors                             Standard #>   Information                                 Expected #>   Information saturated (h1) model          Structured #>  #> Regressions: #>                    Estimate  Std.Err    Chisq     LRTp #>   f3 ~                                                 #>     f1                0.714    0.220   13.381    0.000 #>     f2                0.505    0.276    4.016    0.045 #>   f4 ~                                                 #>     f3                0.683    0.148   44.155    0.000 #>  #> Covariances: #>                    Estimate  Std.Err    Chisq     LRTp #>   f1 ~~                                                #>     f2                0.053    0.024    9.729    0.002"},{"path":"https://sfcheung.github.io/semlrtp/articles/semlrtp.html","id":"limitations","dir":"Articles","previous_headings":"","what":"Limitations","title":"Get Started","text":"LRT p-value computed fixing parameter zero, parameter LRT p-value computed. example, suppose request LRT p-values factor loadings using argument op: shown , LRT p-values computed indicators loadings fixed zero.","code":"fit_lrtp_loadings <- lrtp(fit,                           op = \"=~\") fit_lrtp_loadings #>  #> Parameter Estimates: #>  #>   Standard errors                             Standard #>   Information                                 Expected #>   Information saturated (h1) model          Structured #>  #> Latent Variables: #>                    Estimate  Std.Err    Chisq     LRTp #>   f1 =~                                                #>     x2                0.844    0.206   27.682    0.000 #>     x3                1.145    0.255   54.842    0.000 #>   f2 =~                                                #>     x6                1.127    0.331   33.687    0.000 #>     x7                0.630    0.207   13.364    0.000 #>   f3 =~                                                #>     x10               0.823    0.143   50.232    0.000 #>     x11               0.918    0.151   60.791    0.000 #>   f4 =~                                                #>     x14               1.043    0.240   40.668    0.000 #>     x15               0.475    0.152   12.393    0.000"},{"path":"https://sfcheung.github.io/semlrtp/articles/semlrtp.html","id":"further-information","dir":"Articles","previous_headings":"","what":"Further Information","title":"Get Started","text":"Please refer help page lrtp() arguments, print method lrtp() output (print.lrtp()) options printing.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/semlrtp/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Shu Fai Cheung. Author, maintainer. Mark Hok Chio Lai. Author.","code":""},{"path":"https://sfcheung.github.io/semlrtp/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Cheung S, Lai M (2025). semlrtp: Likelihood Ratio Test P-Values Structural Equation Models. R package version 0.1.1.2, https://sfcheung.github.io/semlrtp/.","code":"@Manual{,   title = {semlrtp: Likelihood Ratio Test P-Values for Structural Equation Models},   author = {Shu Fai Cheung and Mark Hok Chio Lai},   year = {2025},   note = {R package version 0.1.1.2},   url = {https://sfcheung.github.io/semlrtp/}, }"},{"path":"https://sfcheung.github.io/semlrtp/index.html","id":"semlrtp-likelihood-ratio-test-p-values-for-structural-equation-models-","dir":"","previous_headings":"","what":"Likelihood Ratio Test P-Values for Structural Equation Models","title":"Likelihood Ratio Test P-Values for Structural Equation Models","text":"package used computing LRT p-values free parameters structural equation model using likelihood ratio test (LRT). demonstrated Get-Started article, LRT p-value advantages usual p-values reported SEM program. However, easy compute p-value requires fitting one additional model. developed package make process simple automatic practical use LRT p-values commonly interpreted parameters. See Get-Started article quick demonstration use package. information package, please visit GitHub page: https://sfcheung.github.io/semlrtp/","code":""},{"path":"https://sfcheung.github.io/semlrtp/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Likelihood Ratio Test P-Values for Structural Equation Models","text":"stable version CRAN can installed install.packages(): latest developmental version package can installed remotes::install_github:","code":"install.packages(\"semlrtp\") remotes::install_github(\"sfcheung/semlrtp\")"},{"path":"https://sfcheung.github.io/semlrtp/index.html","id":"issues","dir":"","previous_headings":"","what":"Issues","title":"Likelihood Ratio Test P-Values for Structural Equation Models","text":"suggestions found bugs, please feel feel open GitHub issue . Thanks.","code":""},{"path":"https://sfcheung.github.io/semlrtp/reference/data_sem16.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample Dataset For Test (16 Items and 2 Groups) — data_sem16","title":"Sample Dataset For Test (16 Items and 2 Groups) — data_sem16","text":"16-variable dataset 336 cases.","code":""},{"path":"https://sfcheung.github.io/semlrtp/reference/data_sem16.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample Dataset For Test (16 Items and 2 Groups) — data_sem16","text":"","code":"data_sem16"},{"path":"https://sfcheung.github.io/semlrtp/reference/data_sem16.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample Dataset For Test (16 Items and 2 Groups) — data_sem16","text":"data frame 336 rows 16 variables: x1 Indicator. Numeric. x2 Indicator. Numeric. x3 Indicator. Numeric. x4 Indicator. Numeric. x5 Indicator. Numeric. x6 Indicator. Numeric. x7 Indicator. Numeric. x8 Indicator. Numeric. x9 Indicator. Numeric. x10 Indicator. Numeric. x11 Indicator. Numeric. x12 Indicator. Numeric. x13 Indicator. Numeric. x14 Indicator. Numeric. x15 Indicator. Numeric. x16 Indicator. Numeric. group Group two values, \"alpha\" \"gamma\". Character.","code":""},{"path":"https://sfcheung.github.io/semlrtp/reference/data_sem16.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample Dataset For Test (16 Items and 2 Groups) — data_sem16","text":"","code":"library(lavaan) #> This is lavaan 0.6-19 #> lavaan is FREE software! Please report any bugs. data(data_sem16) mod <- \" f1 =~ x1 + x2 + x3 + x4 f2 =~ x5 + x6 + x7 + x8 f3 =~ x9 + x10 + x11 + x12 f4 =~ x13 + x14 + x15 + x16 f3 ~ f2 + f1 f4 ~ f3 \" fit <- sem(mod, data_sem16) summary(fit) #> lavaan 0.6-19 ended normally after 53 iterations #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                        36 #>  #>   Number of observations                           336 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                86.336 #>   Degrees of freedom                               100 #>   P-value (Chi-square)                           0.833 #>  #> Parameter Estimates: #>  #>   Standard errors                             Standard #>   Information                                 Expected #>   Information saturated (h1) model          Structured #>  #> Latent Variables: #>                    Estimate  Std.Err  z-value  P(>|z|) #>   f1 =~                                                #>     x1                1.000                            #>     x2                0.888    0.200    4.446    0.000 #>     x3                1.049    0.216    4.863    0.000 #>     x4                0.582    0.168    3.470    0.001 #>   f2 =~                                                #>     x5                1.000                            #>     x6                1.202    0.328    3.667    0.000 #>     x7                0.792    0.240    3.294    0.001 #>     x8                0.407    0.188    2.168    0.030 #>   f3 =~                                                #>     x9                1.000                            #>     x10               0.854    0.135    6.343    0.000 #>     x11               0.920    0.139    6.634    0.000 #>     x12               0.814    0.133    6.114    0.000 #>   f4 =~                                                #>     x13               1.000                            #>     x14               1.077    0.215    5.008    0.000 #>     x15               0.475    0.143    3.319    0.001 #>     x16               0.939    0.193    4.857    0.000 #>  #> Regressions: #>                    Estimate  Std.Err  z-value  P(>|z|) #>   f3 ~                                                 #>     f2                0.455    0.208    2.185    0.029 #>     f1                0.555    0.174    3.195    0.001 #>   f4 ~                                                 #>     f3                0.561    0.115    4.887    0.000 #>  #> Covariances: #>                    Estimate  Std.Err  z-value  P(>|z|) #>   f1 ~~                                                #>     f2                0.109    0.038    2.864    0.004 #>  #> Variances: #>                    Estimate  Std.Err  z-value  P(>|z|) #>    .x1                0.999    0.099   10.059    0.000 #>    .x2                1.070    0.099   10.849    0.000 #>    .x3                0.689    0.083    8.334    0.000 #>    .x4                1.120    0.092   12.110    0.000 #>    .x5                0.965    0.098    9.832    0.000 #>    .x6                0.888    0.110    8.055    0.000 #>    .x7                1.037    0.093   11.178    0.000 #>    .x8                1.006    0.081   12.487    0.000 #>    .x9                0.961    0.097    9.862    0.000 #>    .x10               1.010    0.093   10.817    0.000 #>    .x11               0.941    0.091   10.283    0.000 #>    .x12               1.069    0.096   11.128    0.000 #>    .x13               1.107    0.111   10.006    0.000 #>    .x14               1.113    0.117    9.541    0.000 #>    .x15               1.073    0.087   12.292    0.000 #>    .x16               1.064    0.104   10.255    0.000 #>     f1                0.297    0.089    3.322    0.001 #>     f2                0.217    0.083    2.617    0.009 #>    .f3                0.300    0.077    3.881    0.000 #>    .f4                0.200    0.070    2.866    0.004 #>"},{"path":"https://sfcheung.github.io/semlrtp/reference/fix_to_zero.html","id":null,"dir":"Reference","previous_headings":"","what":"Fix a Free Parameter To Zero And Fit a Model Again — fix_to_zero","title":"Fix a Free Parameter To Zero And Fit a Model Again — fix_to_zero","text":"fixes designated free parameter lavaan object zero refit model.","code":""},{"path":"https://sfcheung.github.io/semlrtp/reference/fix_to_zero.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fix a Free Parameter To Zero And Fit a Model Again — fix_to_zero","text":"","code":"fix_to_zero(fit, par_id, store_fit = FALSE, se_keep_bootstrap = FALSE)"},{"path":"https://sfcheung.github.io/semlrtp/reference/fix_to_zero.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fix a Free Parameter To Zero And Fit a Model Again — fix_to_zero","text":"fit lavaan-class object. par_id integer. row number free parameter parameter table fit fixed. store_fit Logical. TRUE, fit stored output. Default FALSE. se_keep_bootstrap Logical. TRUE fit used bootstrapping standard error (se = \"bootstrap\"), bootstrapping also use fitting restricted model. FALSE, default, se set \"standard\" \"bootstrap\" fit, speed computation.","code":""},{"path":"https://sfcheung.github.io/semlrtp/reference/fix_to_zero.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fix a Free Parameter To Zero And Fit a Model Again — fix_to_zero","text":"fix_to_zero-class object, list elements: fit0 lavaan output refitted object. NA fit failed reasons. considered acceptable solution, optimization must converge, solution passes lavaan's post check, variance-covariance matrix estimates successfully computed, increase model degree freedom equal expected change. fit1 original lavaan output store_fit TRUE. NULL store_fit FALSE, default. par_id row number designated free parameter parameter table. call original call function. ptable0 parameter table designated parameter fixed zero. can used diagnostic purpose fit failed. fit0_error error message refitting model (ptable0), . error, NA. vcov_ok TRUE variance-covariance matrix estimates can computed without error warning. FALSE otherwise. vcov_msg message generated using lavaan::lavInspect() get variance-covariance matrix parameter estimates refitted model. TRUE, error warning. Can used diagnostic purposes. converged: Whether refitting modified model (ptable0) converged. post_check_passed: Whether solution modified model (ptable0) passed lavaan's post check. post_check_msg: solution failed lavaan's post check, stores warning message. solution passes check, NA. fit_not_ok: fit failed reasons, fit object, available, stored element rather fit0. fit object can retrieved diagnostic purposed necessary. df_diff_one: Whether difference model degrees freedom modified model original model one. variance fitted zero, related covariance(s) /also fitted zero difference model degrees freedom can legitimately greater one. se_force_standard: Whether se forced \"standard\" even \"bootstrap\" fit. FALSE, either se \"bootstrap\" fit changed fitting restricted model.","code":""},{"path":"https://sfcheung.github.io/semlrtp/reference/fix_to_zero.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fix a Free Parameter To Zero And Fit a Model Again — fix_to_zero","text":"modifies parameter table lavaan-class object fits model . Users usually call lrtp() directly instead calling function. exported developers.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/semlrtp/reference/fix_to_zero.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Fix a Free Parameter To Zero And Fit a Model Again — fix_to_zero","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/semlrtp/reference/fix_to_zero.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fix a Free Parameter To Zero And Fit a Model Again — fix_to_zero","text":"","code":"library(lavaan) data(data_sem16) mod <- \" f1 =~ x1 + x2 + x3 f2 =~ x4 + x5 + x6 \" fit <- sem(mod, data_sem16) # Fix the factor covariance to zero out <- fix_to_zero(fit, par_id = 15) summary(out$fit0) #> lavaan 0.6-19 ended normally after 49 iterations #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                        12 #>  #>   Number of observations                           336 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                27.655 #>   Degrees of freedom                                 9 #>   P-value (Chi-square)                           0.001 #>  #> Parameter Estimates: #>  #>   Standard errors                             Standard #>   Information                                 Expected #>   Information saturated (h1) model          Structured #>  #> Latent Variables: #>                    Estimate  Std.Err  z-value  P(>|z|) #>   f1 =~                                                #>     x1                1.000                            #>     x2                0.911    0.253    3.604    0.000 #>     x3                1.051    0.323    3.257    0.001 #>   f2 =~                                                #>     x4                1.000                            #>     x5                2.538    1.424    1.782    0.075 #>     x6                5.526    6.331    0.873    0.383 #>  #> Covariances: #>                    Estimate  Std.Err  z-value  P(>|z|) #>   f1 ~~                                                #>     f2                0.000                            #>  #> Variances: #>                    Estimate  Std.Err  z-value  P(>|z|) #>    .x1                1.010    0.119    8.457    0.000 #>    .x2                1.067    0.111    9.573    0.000 #>    .x3                0.700    0.114    6.159    0.000 #>    .x4                1.198    0.096   12.500    0.000 #>    .x5                1.037    0.182    5.705    0.000 #>    .x6                0.515    0.775    0.664    0.507 #>     f1                0.286    0.110    2.595    0.009 #>     f2                0.022    0.031    0.723    0.469 #>"},{"path":"https://sfcheung.github.io/semlrtp/reference/lrt.html","id":null,"dir":"Reference","previous_headings":"","what":"Fix a Free Parameter to Zero and Do an LR Test — lrt","title":"Fix a Free Parameter to Zero and Do an LR Test — lrt","text":"Fix designated free parameter zero likelihood ratio test.","code":""},{"path":"https://sfcheung.github.io/semlrtp/reference/lrt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fix a Free Parameter to Zero and Do an LR Test — lrt","text":"","code":"lrt(   fit,   par_id,   store_fit = FALSE,   group = NULL,   se_keep_bootstrap = FALSE,   LRT_method = \"default\",   scaled.shifted = TRUE,   fallback_method = \"satorra.2000\" )"},{"path":"https://sfcheung.github.io/semlrtp/reference/lrt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fix a Free Parameter to Zero and Do an LR Test — lrt","text":"fit lavaan-class object. par_id can integer. string. integer, row number free parameter parameter table fit fixed zero. string, must valid lavaan model syntax parameter, label labelled parameter. store_fit Logical. TRUE, fit stored output. Default FALSE. group model syntax used par_id model multigroup model, either group label group number parameter. se_keep_bootstrap Logical. TRUE fit used bootstrapping standard error (se = \"bootstrap\"), bootstrapping also use fitting restricted model. FALSE, default, se set \"standard\" \"bootstrap\" fit, speed computation. LRT_method String. Passed method argument lavaan::lavTestLRT(). Default \"default\", let lavaan::lavTestLRT() decide method based fit. scaled.shifted Logical. Used method used lavaan::lavTestLRT() \"satorra.2000\". Default TRUE scaled shifted test statistic used, default lavaan::lavTestLRT(). fallback_method default method lavaan::lavTestLRT(), \"satorra.bentler.2001\", may sometimes fail. failed, function call lavaan::lavTestLRT() using fallback_method. \"satorra.2000\" default.","code":""},{"path":"https://sfcheung.github.io/semlrtp/reference/lrt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fix a Free Parameter to Zero and Do an LR Test — lrt","text":"lrt-class object, list following elements: lrt: output lavaan::lavTestLRT(). error message warning, set NA. par_id: row number designated free parameter. par_label: label designated free parameter, generated lavaan::lav_partable_labels(). fit1: original lavaan output, store_fit TRUE. NA store_fit FALSE, default. fix_to_zero: output fit_to_zero(). call: call function. lrt_status: Integer. 0, error warning likelihood ratio test lavaan::lavTestLRT() returns table (data.frame) test. -1, something wrong, e.g., error warning occurred likelihood ratio test. lrt_msg: something went wrong likelihood ratio test, error warning message calling lavaan::lavTestLRT(). error warning, NA.","code":""},{"path":"https://sfcheung.github.io/semlrtp/reference/lrt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fix a Free Parameter to Zero and Do an LR Test — lrt","text":"fixes designated free parameter lavaan output, refit model, likelihood ratio test comparing model original model. model fixed generated fix_to_zero(). parameter fixed variance, related covariance(s), , also fixed zero. Users usually call lrtp() directly instead calling function. exported developers.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/semlrtp/reference/lrt.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Fix a Free Parameter to Zero and Do an LR Test — lrt","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/semlrtp/reference/lrt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fix a Free Parameter to Zero and Do an LR Test — lrt","text":"","code":"library(lavaan) data(data_sem16) mod <- \" f1 =~ x1 + x2 + x3 f2 =~ x4 + x5 + x6 \" fit <- sem(mod, data_sem16) # Fix the factor covariance to zero out <- lrt(fit, par_id = 15) out$lrt #>  #> Chi-Squared Difference Test #>  #>      Df    AIC    BIC  Chisq Chisq diff   RMSEA Df diff Pr(>Chisq)    #> fit   8 6024.1 6073.7 17.009                                          #> fit0  9 6032.8 6078.6 27.655     10.646 0.16943       1   0.001103 ** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 parameterEstimates(fit)[15, ] #>    lhs op rhs   est    se     z pvalue ci.lower ci.upper #> 15  f1 ~~  f2 0.057 0.028 2.005  0.045    0.001    0.112 parameterEstimates(out$fix_to_zero$fit0)[15, ] #>    lhs op rhs est se  z pvalue ci.lower ci.upper #> 15  f1 ~~  f2   0  0 NA     NA        0        0  # Can use model syntax for par_id  out <- lrt(fit, par_id = \"f1 =~ x3\") out$lrt #>  #> Chi-Squared Difference Test #>  #>      Df    AIC    BIC  Chisq Chisq diff   RMSEA Df diff Pr(>Chisq)     #> fit   8 6024.1 6073.7 17.009                                           #> fit0  9 6061.7 6107.5 56.566     39.557 0.33875       1  3.186e-10 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1"},{"path":"https://sfcheung.github.io/semlrtp/reference/lrtp.html","id":null,"dir":"Reference","previous_headings":"","what":"Likelihood Ratio Test P-Values — lrtp","title":"Likelihood Ratio Test P-Values — lrtp","text":"Compute likelihood ratio test (LRT) p-values free parameters lavaan output.","code":""},{"path":"https://sfcheung.github.io/semlrtp/reference/lrtp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Likelihood Ratio Test P-Values — lrtp","text":"","code":"lrtp(   fit,   op = c(\"~\", \"~~\"),   no_variances = TRUE,   no_error_variances = TRUE,   no_error_covariances = TRUE,   se_keep_bootstrap = FALSE,   LRT_method = \"default\",   scaled.shifted = TRUE,   fallback_method = \"satorra.2000\",   progress = TRUE,   parallel = FALSE,   ncores = parallel::detectCores(logical = FALSE) - 1,   load_balancing = TRUE,   ... )"},{"path":"https://sfcheung.github.io/semlrtp/reference/lrtp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Likelihood Ratio Test P-Values — lrtp","text":"fit lavaan-class object. op character vector lavaan model syntax operators. Free parameters operators included, unless excluded arguments. Default c(\"~\", \"~~\"). no_variances Logical. TRUE, default, free variances excluded. (Error variances handled no_error_variances.) no_error_variances Logical, TRUE, default, free error variances excluded. no_error_covariances Logical. TRUE, default, free error covariances excluded. se_keep_bootstrap Logical. TRUE fit used bootstrapping standard error (se = \"bootstrap\"), bootstrapping also use fitting restricted model. FALSE, default, se set \"standard\" \"bootstrap\" fit, speed computation. LRT_method String. Passed method argument lavaan::lavTestLRT(). Default \"default\", let lavaan::lavTestLRT() decide method based fit. scaled.shifted Logical. Used method used lavaan::lavTestLRT() \"satorra.2000\". Default TRUE scaled shifted test statistic used, default lavaan::lavTestLRT(). fallback_method default method lavaan::lavTestLRT(), \"satorra.bentler.2001\", may sometimes fail. failed, function call lavaan::lavTestLRT() using fallback_method. \"satorra.2000\" default. progress Logical. TRUE, default, progress bar displayed show progress (using pbapply package). parallel Logical. TRUE, parallel processing used compute LRT p-values selected parameters. Default FALSE. Set TRUE number selected parameters large. ncores Integer. number CPU cores use parallel TRUE. Default number physical cores (determined parallel::detectCores()) minus 1. load_balancing Logical. TRUE, default, parallel TRUE, load balancing used. May shorten total processing time time compute LRT p-values vary lot across parameters. ... Optional arguments passed lavaan::parameterEstimates().","code":""},{"path":"https://sfcheung.github.io/semlrtp/reference/lrtp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Likelihood Ratio Test P-Values — lrtp","text":"lrt-class object, data-frame-like object similar output lavaan::parameterEstimates(), column LRTp LRT p-values, well columns chi-square difference test. print method, print.lrtp().","code":""},{"path":"https://sfcheung.github.io/semlrtp/reference/lrtp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Likelihood Ratio Test P-Values — lrtp","text":"finds free parameters lavaan-class object, computes likelihood ratio test (LRT) p-value fixed zero, returns parameter estimates table LRT p-values included. default, computes LRT p-values regression paths covariances, except error covariances. default can overridden using arguments op, no_variances, no_error_variances, no_error_covariances.","code":""},{"path":"https://sfcheung.github.io/semlrtp/reference/lrtp.html","id":"technical-details","dir":"Reference","previous_headings":"","what":"Technical Details","title":"Likelihood Ratio Test P-Values — lrtp","text":"first identify parameters processed, call lrt() . Please refer https://sfcheung.github.io/semlrtp/articles/internal_workflow.html internal workflow.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/semlrtp/reference/lrtp.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Likelihood Ratio Test P-Values — lrtp","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/semlrtp/reference/lrtp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Likelihood Ratio Test P-Values — lrtp","text":"","code":"library(lavaan) data(data_sem16) mod <- \" f1 =~ x1 + x2 + x3 f2 =~ x4 + x5 + x6 f3 =~ x7 + x8 + x9 f4 =~ x10 + x11 + x12 f2 ~~ f1 f3 ~ f1 + f2 f4 ~ f3 \" fit <- sem(mod, data_sem16) lrtp(fit) #>  #> Parameter Estimates: #>  #>   Standard errors                             Standard #>   Information                                 Expected #>   Information saturated (h1) model          Structured #>  #> Regressions: #>                    Estimate  Std.Err    Chisq     LRTp #>   f3 ~                                                 #>     f1                0.248    0.097   10.343    0.001 #>     f2                0.292    0.199    3.778    0.052 #>   f4 ~                                                 #>     f3                2.118    0.684   86.205    0.000 #>  #> Covariances: #>                    Estimate  Std.Err    Chisq     LRTp #>   f1 ~~                                                #>     f2                0.039    0.022    9.717    0.002 #>  lrtp(fit, op = \"~\") #>  #> Parameter Estimates: #>  #>   Standard errors                             Standard #>   Information                                 Expected #>   Information saturated (h1) model          Structured #>  #> Regressions: #>                    Estimate  Std.Err    Chisq     LRTp #>   f3 ~                                                 #>     f1                0.248    0.097   10.343    0.001 #>     f2                0.292    0.199    3.778    0.052 #>   f4 ~                                                 #>     f3                2.118    0.684   86.205    0.000 #>"},{"path":"https://sfcheung.github.io/semlrtp/reference/print.lrt.html","id":null,"dir":"Reference","previous_headings":"","what":"Print an 'lrt'- Class Object — print.lrt","title":"Print an 'lrt'- Class Object — print.lrt","text":"Print content lrt-class object.","code":""},{"path":"https://sfcheung.github.io/semlrtp/reference/print.lrt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print an 'lrt'- Class Object — print.lrt","text":"","code":"# S3 method for class 'lrt' print(x, digits = 3, ...)"},{"path":"https://sfcheung.github.io/semlrtp/reference/print.lrt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print an 'lrt'- Class Object — print.lrt","text":"x lrt-class object. digits Integer. number decimal places print. Default 3. ... Optional arguments. used.","code":""},{"path":"https://sfcheung.github.io/semlrtp/reference/print.lrt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print an 'lrt'- Class Object — print.lrt","text":"x returned invisibly. Called side effect.","code":""},{"path":"https://sfcheung.github.io/semlrtp/reference/print.lrt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print an 'lrt'- Class Object — print.lrt","text":"print method output lrt().","code":""},{"path":[]},{"path":"https://sfcheung.github.io/semlrtp/reference/print.lrt.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print an 'lrt'- Class Object — print.lrt","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/semlrtp/reference/print.lrt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print an 'lrt'- Class Object — print.lrt","text":"","code":"library(lavaan) data(data_sem16) mod <- \" f1 =~ x1 + x2 + x3 f2 =~ x4 + x5 + x6 \" fit <- sem(mod, data_sem16)  out <- lrt(fit, par_id = \"f1 ~~ f2\") out #>  #> ==== LRT p-value ==== #>  #> Parameter: f1~~f2  #>  #> LRT test with the selected parameter fixed to zero: #>  #> Chi-Squared Difference Test #>  #>      Df  AIC  BIC Chisq Chisq diff RMSEA Df diff Pr(>Chisq)    #> fit   8 6024 6074  17.0                                        #> fit0  9 6033 6079  27.6       10.7 0.169       1     0.0011 ** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>"},{"path":"https://sfcheung.github.io/semlrtp/reference/print.lrtp.html","id":null,"dir":"Reference","previous_headings":"","what":"Print an 'lrtp'- Class Object — print.lrtp","title":"Print an 'lrtp'- Class Object — print.lrtp","text":"Print content lrtp-class object.","code":""},{"path":"https://sfcheung.github.io/semlrtp/reference/print.lrtp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print an 'lrtp'- Class Object — print.lrtp","text":"","code":"# S3 method for class 'lrtp' print(   x,   digits = 3,   lrtp_only = TRUE,   wald_stats = FALSE,   output = c(\"text\", \"data.frame\", \"table\"),   ... )"},{"path":"https://sfcheung.github.io/semlrtp/reference/print.lrtp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print an 'lrtp'- Class Object — print.lrtp","text":"x lrtp-class object. digits Integer. number decimal places print. Default 3. lrtp_only Logical. TRUE, default, parameters LRT p-values printed. wald_stats Logical. TRUE, usual Wald statistics (e.g., z statistics, p-values, CIs) printed. FALSE default, assuming users prefer using LRT statistics using lrtp(). output format printout. \"text\", style summary() lavaan-class object used. \"data.frame\" \"table\", data frame format lavaan::parameterEstimates() used. ... Optional arguments. used.","code":""},{"path":"https://sfcheung.github.io/semlrtp/reference/print.lrtp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print an 'lrtp'- Class Object — print.lrtp","text":"x returned invisibly. Called side effect.","code":""},{"path":"https://sfcheung.github.io/semlrtp/reference/print.lrtp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print an 'lrtp'- Class Object — print.lrtp","text":"print method output lrtp(). Additional diagnostic information printed one likelihood tests encounter errors warnings.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/semlrtp/reference/print.lrtp.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print an 'lrtp'- Class Object — print.lrtp","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/semlrtp/reference/print.lrtp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print an 'lrtp'- Class Object — print.lrtp","text":"","code":"library(lavaan) data(data_sem16) mod <- \" f1 =~ x1 + x2 + x3 f2 =~ x4 + x5 + x6 \" fit <- sem(mod, data_sem16)  out <- lrtp(fit) out #>  #> Parameter Estimates: #>  #>   Standard errors                             Standard #>   Information                                 Expected #>   Information saturated (h1) model          Structured #>  #> Covariances: #>                    Estimate  Std.Err    Chisq     LRTp #>   f1 ~~                                                #>     f2                0.057    0.028   10.646    0.001 #>  print(out, lrtp_only = FALSE) #>  #> Parameter Estimates: #>  #>   Standard errors                             Standard #>   Information                                 Expected #>   Information saturated (h1) model          Structured #>  #> Latent Variables: #>                    Estimate  Std.Err    Chisq     LRTp #>   f1 =~                                                #>     x1                1.000                NA       NA #>     x2                0.963    0.252       NA       NA #>     x3                1.054    0.284       NA       NA #>   f2 =~                                                #>     x4                1.000                NA       NA #>     x5                1.771    0.740       NA       NA #>     x6                2.368    1.060       NA       NA #>  #> Covariances: #>                    Estimate  Std.Err    Chisq     LRTp #>   f1 ~~                                                #>     f2                0.057    0.028   10.646    0.001 #>  #> Variances: #>                    Estimate  Std.Err    Chisq     LRTp #>    .x1                1.020    0.111       NA       NA #>    .x2                1.048    0.109       NA       NA #>    .x3                0.709    0.100       NA       NA #>    .x4                1.154    0.096       NA       NA #>    .x5                0.972    0.114       NA       NA #>    .x6                0.826    0.162       NA       NA #>     f1                0.276    0.100       NA       NA #>     f2                0.067    0.048       NA       NA #>"},{"path":"https://sfcheung.github.io/semlrtp/reference/semlrtp-package.html","id":null,"dir":"Reference","previous_headings":"","what":"semlrtp: Likelihood Ratio Test P-Values for Structural Equation Models — semlrtp-package","title":"semlrtp: Likelihood Ratio Test P-Values for Structural Equation Models — semlrtp-package","text":"Computes likelihood ratio test (LRT) p-values free parameters structural equation model. Currently supports models fitted 'lavaan' package Rosseel (2012) doi:10.18637/jss.v048.i02 .","code":""},{"path":[]},{"path":"https://sfcheung.github.io/semlrtp/reference/semlrtp-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"semlrtp: Likelihood Ratio Test P-Values for Structural Equation Models — semlrtp-package","text":"Maintainer: Shu Fai Cheung shufai.cheung@gmail.com (ORCID) Authors: Mark Hok Chio Lai marklhc@gmail.com (ORCID)","code":""},{"path":[]},{"path":"https://sfcheung.github.io/semlrtp/news/index.html","id":"miscellaneous-0-1-1-2","dir":"Changelog","previous_headings":"","what":"Miscellaneous","title":"semlrtp 0.1.1.2","text":"Added package doc usethis::use_package_doc(), easy access list help pages. Default starting used fixing parameter zero leads bad starting values. See https://github.com/sfcheung/semlrtp/pull/66 https://github.com/sfcheung/semlrtp/issues/65 . (0.1.1.2)","code":""},{"path":"https://sfcheung.github.io/semlrtp/news/index.html","id":"semlrtp-011","dir":"Changelog","previous_headings":"","what":"semlrtp 0.1.1","title":"semlrtp 0.1.1","text":"CRAN release: 2024-06-20 first version CRAN.","code":""}]
